using Api.Tests.Common.Enums;
using Api.Tests.Common.Extensions;
using Application.Services;
using Application.Services.Interfaces;
using CrossCutting.Common.Dtos.Response;
using CrossCutting.Const;
using CrossCutting.Dtos.Auth.Request;
using CrossCutting.Dtos.Driver.Request;
using CrossCutting.Dtos.Driver.Response;
using CrossCutting.Dtos.DriverNotificated.Request;
using CrossCutting.Dtos.DriverNotificated.Response;
using CrossCutting.Dtos.ModelVehicle.Request;
using CrossCutting.Dtos.ModelVehicle.Response;
using CrossCutting.Dtos.Motorcycle.Request;
using CrossCutting.Dtos.Motorcycle.Response;
using CrossCutting.Dtos.Notification.Request;
using CrossCutting.Dtos.Notification.Response;
using CrossCutting.Dtos.Order.Request;
using CrossCutting.Dtos.Order.Response;
using CrossCutting.Dtos.OrderAccepted.Request;
using CrossCutting.Dtos.OrderAccepted.Response;
using CrossCutting.Dtos.OrderDelivered.Request;
using CrossCutting.Dtos.OrderDelivered.Response;
using CrossCutting.Dtos.OrderStatus.Request;
using CrossCutting.Dtos.OrderStatus.Response;
using CrossCutting.Dtos.Plan.Request;
using CrossCutting.Dtos.Plan.Response;
using CrossCutting.Dtos.PlanType.Request;
using CrossCutting.Dtos.PlanType.Response;
using CrossCutting.Dtos.Rental.Request;
using CrossCutting.Dtos.Rental.Response;
using CrossCutting.Dtos.User.Request;
using CrossCutting.Dtos.User.Response;
using CrossCutting.Dtos.UserRole.Request;
using CrossCutting.Dtos.UserRole.Response;
using CrossCutting.Interfaces;
using CrossCutting.Settings;
using Domain.Common.Enums;
using Domain.Repositories;
using Infrastructure.DataAccess;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.AspNetCore.TestHost;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using RabbitMQ.Client;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using Testcontainers.PostgreSql;
using Testcontainers.RabbitMq;
using WebApi.Modules;
using Xunit;

namespace Api.Tests.Common.Factories;

public class CustomWebApplicationFactory : IClassFixture<WebApplicationFactory<Program>>, IAsyncLifetime
{
    #region Properties

    private readonly WebApplicationFactory<Program> _factory;
    private IOrderStatusRepository _orderStatusRepository;
    private IModelVehicleRepository _modelVehicleRepository;
    private IPlanRepository _planRepository;
    private IPlanTypeRepository _planTypeRepository;
    private IUserRepository _userRepository;
    private IUserRoleRepository _userRoleRepository;
    private IUnitOfWork _unitOfWork;

    private readonly PostgreSqlContainer _dbContainer =
        new PostgreSqlBuilder().WithName($"postgres-test-{Guid.NewGuid()}")
                               .WithImage("postgres:latest")
                               .WithDatabase("mottu")
                               .WithUsername("postgres")
                               .WithPassword("jT7RG4k7L")
                               .Build();

    private readonly RabbitMqContainer _rabbitMqContainer = new RabbitMqBuilder()
        .WithName($"rabbitmq-test-{Guid.NewGuid()}")
        .WithImage("rabbitmq:3-management")
        .WithUsername("mottu")
        .WithPassword("mottu")
        .WithHostname("rabbitmq")
        .WithExposedPort("5672")
        .Build();

    public HttpClient _client;

    private static readonly Random _random = new Random();

    private static string _longText = "IdentificadorUnicoDeRegistroParaOUsuarioIncluindoNomeSobrenomeDataDeNascimentoEnderecoEmailEOutrasInformacoesRelevantesParaGarantirAUnicidadeEIntegridadeDosDadosNoSistemaDeGerenciamentoDeUsuariosAtivoIdentificadorUnicoDeRegistroParaOUsuarioIncluindoNomeSobrenomeDataDeNascimentoEnderecoEmailEOutrasInformacoesRelevantesParaGarantirAUnicidadeEIntegridadeDosDadosNoSistemaDeGerenciamentoDeUsuariosAtivo";

    #region Driver

    public static string ImageBase64Png = "";

    public static string ImageBase64InvalidJpeg = "";

    #endregion

    #region Order Status

    private static readonly string[] _status = {
        "Status1", "Status2", "Status3",
        "Status4", "Status5", "Status6",
        "Status7", "Status8", "Status9",
        "Status10", "Status11"
    };

    #endregion

    #region Model Vehicle

    private static readonly string[] _modelVehicles = {
        "Modelo1", "Modelo2", "Modelo3",
        "Modelo4", "Modelo5", "Modelo6",
        "Modelo7", "Modelo8", "Modelo9",
        "Modelo10", "Modelo11", "Modelo12",
        "Modelo13", "Modelo14", "Modelo15",
        "Modelo16", "Modelo17", "Modelo18",
        "Modelo19", "Modelo20", "Modelo21",
        "Modelo22", "Modelo23", "Modelo24",
        "Modelo25", "Modelo26", "Modelo27",
        "Modelo28", "Modelo29", "Modelo30",
        "Modelo31", "Modelo32", "Modelo33",
        "Modelo34", "Modelo35", "Modelo36",
        "Modelo37", "Modelo38", "Modelo39",
        "Modelo40", "Modelo41", "Modelo42",
        "Modelo43", "Modelo44", "Modelo45",
        "Modelo46", "Modelo47", "Modelo48",
        "Modelo49", "Modelo50", "Modelo51",
        "Modelo52", "Modelo53", "Modelo54",
        "Modelo55", "Modelo56", "Modelo57",
        "Modelo58", "Modelo59", "Modelo60",
        "Modelo61", "Modelo62", "Modelo63",
        "Modelo64", "Modelo65", "Modelo66",
        "Modelo67", "Modelo68", "Modelo69",
        "Modelo70", "Modelo71", "Modelo72",
        "Modelo73", "Modelo74", "Modelo75",
        "Modelo76", "Modelo77", "Modelo78",
        "Modelo79", "Modelo80", "Modelo81",
        "Modelo82", "Modelo83", "Modelo84",
        "Modelo85", "Modelo86", "Modelo87",
        "Modelo88", "Modelo89", "Modelo90",
        "Modelo91", "Modelo92", "Modelo93",
        "Modelo94", "Modelo95", "Modelo96",
        "Modelo97", "Modelo98", "Modelo99",
        "Modelo100"
    };

    #endregion

    #region Plan Type

    private static readonly string[] _planTypes = {
        "Plano1", "Plano2", "Plano3",
        "Plano4", "Plano5", "Plano6",
        "Plano7", "Plano8", "Plano9",
        "Plano10", "Plano11", "Plano12",
        "Plano13", "Plano14", "Plano15",
        "Plano16", "Plano17", "Plano18",
        "Plano19", "Plano20", "Plano21",
        "Plano22", "Plano23", "Plano24",
        "Plano25", "Plano26", "Plano27",
        "Plano28", "Plano29", "Plano30",
        "Plano31", "Plano32", "Plano33",
        "Plano34", "Plano35", "Plano36",
        "Plano37", "Plano38", "Plano39",
        "Plano40", "Plano41", "Plano42",
        "Plano43", "Plano44", "Plano45",
        "Plano46", "Plano47", "Plano48",
        "Plano49", "Plano50"
    };

    #region User Role

    private static readonly string[] _userRoles = {
        "Perfil1", "Perfil2", "Perfil3",
        "Perfil4", "Perfil5", "Perfil6",
        "Perfil7", "Perfil8", "Perfil9",
        "Perfil10", "Perfil11", "Perfil12",
        "Perfil13", "Perfil14", "Perfil15",
        "Perfil16", "Perfil17", "Perfil18",
        "Perfil19", "Perfil20", "Perfil21",
        "Perfil22", "Perfil23", "Perfil24",
        "Perfil25", "Perfil26", "Perfil27",
        "Perfil28", "Perfil29", "Perfil30",
        "Perfil31", "Perfil32", "Perfil33",
        "Perfil34", "Perfil35", "Perfil36",
        "Perfil37", "Perfil38", "Perfil39",
        "Perfil40", "Perfil41", "Perfil42",
        "Perfil43", "Perfil44", "Perfil45",
        "Perfil46", "Perfil47", "Perfil48",
        "Perfil49", "Perfil50"
    };

    #endregion

    #region User

    private static readonly string[] _firstNames = {
        "Alice", "Bruno", "Carlos", "Diana", "Eva",
        "Felipe", "Gabriela", "Hugo", "Isabel", "João",
        "Karen", "Lucas", "Mariana", "Nicolas", "Olivia",
        "Paulo", "Queila", "Ricardo", "Sofia", "Tiago",
        "Ursula", "Vinícius", "Wanda", "Xavier", "Yasmin",
        "Zoe", "André", "Bianca", "Cecília", "Diego",
        "Elena", "Fernando", "Glória", "Helena", "Igor",
        "Juliana", "Kleber", "Lívia", "Matheus", "Natália",
        "Otávio", "Priscila", "Renato", "Samara", "Tânia",
        "Ulisses", "Viviane", "Walter", "Xuxa", "Yuri",
        "Amanda", "Bruno", "Camila", "Daniel", "Eduarda",
        "Fabiano", "Gustavo", "Henrique", "Isadora", "Júlio",
        "Karla", "Leonardo", "Marta", "Nilton", "Olga",
        "Pablo", "Quiteria", "Rodrigo", "Silvia", "Thiago",
        "Vanessa", "Wilma", "Xena", "Yara", "Zita",
        "Aline", "Beto", "Catarina", "David", "Ester"
    };

    #endregion

    #region Motorcycle

    private static readonly string[] _plates = {
        "ABC1D23", "ABC1D24", "XYZ2E45", "LMN3F67",
        "DEF4G89", "GHI5H90", "JKL6I12", "MNO7J34",
        "PQR8K56", "STU9L78"
    };

    #endregion

    #region Order

    private static readonly string[] _orders = [
        "Pedido Nº: 000001",
        "Pedido Nº: 000002",
        "Pedido Nº: 000003",
        "Pedido Nº: 000004",
        "Pedido Nº: 000005",
        "Pedido Nº: 000006",
        "Pedido Nº: 000007",
        "Pedido Nº: 000008",
        "Pedido Nº: 000009",
        "Pedido Nº: 000010"
    ];

    #endregion

    #endregion

    #endregion

    #region Construtor

    public CustomWebApplicationFactory(
        WebApplicationFactory<Program> factory)
    {
        _factory = factory;
    }

    #endregion

    #region Public Methods

    public async Task DisposeAsync()
    {
        await _dbContainer.StopAsync();
        await _rabbitMqContainer.StopAsync();
    }

    public async Task InitializeAsync()
    {
        await _dbContainer.StartAsync();
        await _rabbitMqContainer.StartAsync();

        _client = _factory.WithWebHostBuilder(builder =>
        {
            builder.ConfigureTestServices(services =>
            {
                services.Remove<DbContextOptions<MottuDbContext>>();
                services.Remove<IConnectionFactory>();
                services.Remove<RabbitMqSettings>();

                #region PostgreSqlModule

                services.AddPostgreSql(null, _dbContainer.GetConnectionString());

                #endregion

                #region UseCasesModule

                services.AddUseCases();

                #endregion

                #region Firebase

                services.Configure<FirebaseStorageSettings>(p => new FirebaseStorageSettings("mottu-henrique.appspot.com"));
                services.AddScoped<IFireBaseService, FireBaseService>();

                #endregion

                #region RabbitMq

                services.Configure<RabbitMqSettings>(p => new RabbitMqSettings(_rabbitMqContainer.Hostname, "5672", "15672", "mottu", "mottu", new TimeSpan(0, 0, 5)));
                services.AddScoped<IRabbitMqService, RabbitMqService>();

                #endregion

                var serviceProvider = services.BuildServiceProvider();

                _unitOfWork = serviceProvider.GetRequiredService<IUnitOfWork>();
                _modelVehicleRepository = serviceProvider.GetRequiredService<IModelVehicleRepository>();
                _orderStatusRepository = serviceProvider.GetRequiredService<IOrderStatusRepository>();
                _planRepository = serviceProvider.GetRequiredService<IPlanRepository>();
                _planTypeRepository = serviceProvider.GetRequiredService<IPlanTypeRepository>();
                _userRepository = serviceProvider.GetRequiredService<IUserRepository>();
                _userRoleRepository = serviceProvider.GetRequiredService<IUserRoleRepository>();
            });
        }).CreateClient();

        _client.Timeout = TimeSpan.FromMinutes(5);
    }

    #endregion

    #region Protected Methods

    #region Auth

    protected async Task<string> LoginAdmin()
    {
        var postAuthRequest = new PostAuthRequest("admin@mottu.app", "1");

        var response = await _client.PostAsJsonAsync("api/v1/login", postAuthRequest);

        var content = await response.Content.ReadAsStringAsync();

        var authResponse = JsonConvert.DeserializeObject<JwtResponse>(content);

        return authResponse.AccessToken;
    }

    protected async Task<string> LoginDriver(
        long userId,
        string name)
    {
        var postAuthRequest = new PostAuthRequest($"{name}@mottu.app", "1234");

        var response = await _client.PostAsJsonAsync("api/v1/login", postAuthRequest);

        var content = await response.Content.ReadAsStringAsync();

        var authResponse = JsonConvert.DeserializeObject<JwtResponse>(content);

        return authResponse.AccessToken;
    }

    #endregion

    #region Driver Notificated

    protected async Task<GetDriverNotificatedResponse> GetDriverNotificated(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/entregadoresNotificados/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var driverNotificatedResponse = JsonConvert.DeserializeObject<GetDriverNotificatedResponse>(content);

        return driverNotificatedResponse;
    }

    protected async Task<PostDriverNotificatedResponse> CreateDriverNotificated(
        long driverId,
        long notificationId)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postDriverNotificatedRequest = GenerateRandomPostDriverNotificatedRequest(driverId, notificationId, null, false);

        var response = await _client.PostAsJsonAsync("api/v1/entregadoresNotificados", postDriverNotificatedRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var driverNotificatedResponse = JsonConvert.DeserializeObject<PostDriverNotificatedResponse>(content);

        return driverNotificatedResponse;
    }

    protected PostDriverNotificatedRequest GenerateRandomPostDriverNotificatedRequest(
        long driverId,
        long notificationId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var driverNotificatedResponse = FillDriverNotificated(driverId, notificationId, fieldEnum, forceEmpty);

        return new PostDriverNotificatedRequest(driverNotificatedResponse.EntregadorId, driverNotificatedResponse.NotificacaoId, driverNotificatedResponse.Data);
    }

    protected PutDriverNotificatedRequest GenerateRandomPutDriverNotificatedRequest(
        long driverId,
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var driverNotificatedResponse = FillDriverNotificated(driverId, orderId, fieldEnum, forceEmpty);

        return new PutDriverNotificatedRequest(driverNotificatedResponse.EntregadorId, driverNotificatedResponse.NotificacaoId, driverNotificatedResponse.Data);
    }

    protected GetDriverNotificatedResponse FillDriverNotificated(
        long driverId,
        long notificationId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var driverNotificatedResponse = new GetDriverNotificatedResponse();

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.Date)
                    driverNotificatedResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));

                if (fieldEnum != FieldEnum.OrderId)
                    driverNotificatedResponse.NotificacaoId = notificationId;

                if (fieldEnum != FieldEnum.DriverId)
                    driverNotificatedResponse.EntregadorId = driverId;
            }
        }
        else
        {
            driverNotificatedResponse.EntregadorId = driverId;
            driverNotificatedResponse.NotificacaoId = notificationId;
            driverNotificatedResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));
        }

        return driverNotificatedResponse;
    }

    #endregion

    #region Driver

    protected async Task<GetDriverResponse> GetDriver(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/entregadores/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var driverResponse = JsonConvert.DeserializeObject<GetDriverResponse>(content);

        return driverResponse;
    }

    protected async Task<PostDriverResponse> CreateDriver(
        CnhTypeEnum cnhTypeEnum,
        bool setUserActive = true)
    {
        var postDriverRequest = GenerateRandomPostDriverRequest(null, false, false);
        postDriverRequest.Tipo_Cnh = cnhTypeEnum.ToString();

        var response = await _client.PostAsJsonAsync("api/v1/entregadores", postDriverRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var driverResponse = JsonConvert.DeserializeObject<PostDriverResponse>(content);

        if (setUserActive)
        {
            var driver = await GetDriver(driverResponse.Id);

            await UserSetActive(driver.UsuarioId.Value, setUserActive);
        }

        return driverResponse;
    }

    protected PostDriverRequest GenerateRandomPostDriverRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var driverResponse = FillDriver(fieldEnum, forceEmpty, forceSize);

        return new PostDriverRequest(driverResponse.Identificador, driverResponse.Nome, driverResponse.Cnpj, driverResponse.Data_Nascimento.ToDateTime(TimeOnly.MinValue), driverResponse.Numero_Cnh, driverResponse.Tipo_Cnh.ToString(), ImageBase64Png);
    }

    protected PutDriverRequest GenerateRandomPutDriverRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var driverResponse = FillDriver(fieldEnum, forceEmpty, forceSize);

        return new PutDriverRequest(driverResponse.Identificador, driverResponse.Nome, driverResponse.Cnpj, driverResponse.Data_Nascimento.ToDateTime(TimeOnly.MinValue), driverResponse.Numero_Cnh, driverResponse.Tipo_Cnh.ToString(), ImageBase64Png);
    }

    protected GetDriverResponse FillDriver(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var driverResponse = new GetDriverResponse();

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.Name)
                    driverResponse.Nome = _firstNames[_random.Next(_firstNames.Length)];

                if (fieldEnum != FieldEnum.Identifier)
                    driverResponse.Identificador = $"{_random.Next(100000000, 999999999)}";

                if (fieldEnum != FieldEnum.Cnpj)
                    driverResponse.Cnpj = GenerateCnpj();

                if (fieldEnum != FieldEnum.DateOfBirth)
                    driverResponse.Data_Nascimento = DateOnly.FromDateTime(DateTime.Today.AddYears(-_random.Next(18, 50)));

                if (fieldEnum != FieldEnum.Cnh)
                    driverResponse.Numero_Cnh = _random.Next(1000000, 9999999).ToString() + "1234";
            }
            else if (forceSize)
            {
                driverResponse.Data_Nascimento = DateOnly.FromDateTime(DateTime.Today.AddYears(-_random.Next(18, 50)));
                driverResponse.Cnpj = GenerateCnpj();
                driverResponse.Numero_Cnh = _random.Next(1000000, 9999999).ToString() + "1234";
                driverResponse.Tipo_Cnh = CnhTypeEnum.A;

                if (fieldEnum == FieldEnum.Name)
                    driverResponse.Nome = _longText;
                else
                    driverResponse.Nome = _firstNames[_random.Next(_firstNames.Length)];

                if (fieldEnum == FieldEnum.Identifier)
                    driverResponse.Identificador = _longText;
                else
                    driverResponse.Identificador = $"{_random.Next(100000000, 999999999)}";
            }
        }
        else
        {
            driverResponse.Nome = _firstNames[_random.Next(_firstNames.Length)];
            driverResponse.Identificador = $"{_random.Next(100000000, 999999999)}";
            driverResponse.Cnpj = GenerateCnpj();
            driverResponse.Data_Nascimento = DateOnly.FromDateTime(DateTime.Today.AddYears(-_random.Next(18, 50)));
            driverResponse.Numero_Cnh = _random.Next(1000000, 9999999).ToString() + "1234";
            driverResponse.Tipo_Cnh = CnhTypeEnum.A;
        }

        return driverResponse;
    }

    protected async Task DriverSetCnhType(
        long driverId,
        CnhTypeEnum cnhTypeEnum)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var putDriverRequest = GenerateRandomPutDriverRequest(null, false, false);
        putDriverRequest.Tipo_Cnh = cnhTypeEnum.ToString();

        await _client.PutAsJsonAsync($"api/v1/entregadores/{driverId}", putDriverRequest);
    }

    protected async Task DriverSetDelivering(
        long driverId,
        bool delivering)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var putDriverSetDeliveringRequest = new PutDriverSetDeliveringRequest();
        putDriverSetDeliveringRequest.Entregando = delivering;

        await _client.PutAsJsonAsync($"api/v1/entregadores/{driverId}/entregando", putDriverSetDeliveringRequest);
    }

    #endregion

    #region Model Vehicle

    protected async Task<GetModelVehicleResponse> GetModelVehicle(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/modelosVeiculo/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var modelVehicleResponse = JsonConvert.DeserializeObject<GetModelVehicleResponse>(content);

        return modelVehicleResponse;
    }

    protected async Task<PostModelVehicleResponse> CreateModelVehicle()
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postModelVehicleRequest = GenerateRandomPostModelVehicleRequest(false, false);

        var response = await _client.PostAsJsonAsync("api/v1/modelosVeiculo", postModelVehicleRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var modelVehicleResponse = JsonConvert.DeserializeObject<PostModelVehicleResponse>(content);

        return modelVehicleResponse;
    }

    protected PostModelVehicleRequest GenerateRandomPostModelVehicleRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var modelVehicleResponse = FillModelVehicle(forceEmpty, forceSize);

        return new PostModelVehicleRequest(modelVehicleResponse.Descricao);
    }

    protected PutModelVehicleRequest GenerateRandomPutModelVehicleRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var modelVehicleResponse = FillModelVehicle(forceEmpty, forceSize);

        return new PutModelVehicleRequest(modelVehicleResponse.Descricao);
    }

    protected GetModelVehicleResponse FillModelVehicle(
        bool forceEmpty,
        bool forceSize)
    {
        var modelVehicleResponse = new GetModelVehicleResponse();

        if (forceEmpty)
            modelVehicleResponse.Descricao = string.Empty;
        else if (forceSize)
            modelVehicleResponse.Descricao = _longText;
        else
            modelVehicleResponse.Descricao = _modelVehicles[_random.Next(_status.Length)];

        return modelVehicleResponse;
    }

    protected async Task ForceDeleteAllModelVehicle()
    {
        var listModelVehicle =
            await _modelVehicleRepository.GetAll();

        foreach (var modelVehicle in listModelVehicle)
            _modelVehicleRepository.Delete(modelVehicle);

        await _unitOfWork.Save()
                         .ConfigureAwait(false);
    }

    #endregion

    #region Motorcycle

    protected async Task<GetMotorcycleResponse> GetMotorcycle(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/motos/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var motorcycleResponse = JsonConvert.DeserializeObject<GetMotorcycleResponse>(content);

        return motorcycleResponse;
    }

    protected async Task<PostMotorcycleResponse> CreateMotorcycle()
    {
        var postMotorcycleRequest = GenerateRandomPostMotorcycleRequest(null, false, false);

        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.PostAsJsonAsync("api/v1/motos", postMotorcycleRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var motorcycleResponse = JsonConvert.DeserializeObject<PostMotorcycleResponse>(content);

        return motorcycleResponse;
    }

    protected PostMotorcycleRequest GenerateRandomPostMotorcycleRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var motorcycleResponse = FillMotorcycle(fieldEnum, forceEmpty, forceSize);

        return new PostMotorcycleRequest(motorcycleResponse.Identificador, motorcycleResponse.Ano, motorcycleResponse.Modelo, motorcycleResponse.Placa);
    }

    protected PutMotorcycleRequest GenerateRandomPutMotorcycleRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var MotorcycleResponse = FillMotorcycle(fieldEnum, forceEmpty, forceSize);

        return new PutMotorcycleRequest(MotorcycleResponse.Identificador, MotorcycleResponse.Ano, MotorcycleResponse.Modelo, MotorcycleResponse.Placa);
    }

    protected GetMotorcycleResponse FillMotorcycle(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var motorcycleResponse = new GetMotorcycleResponse();
        motorcycleResponse.Alugada = false;

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.Identifier)
                    motorcycleResponse.Identificador = $"{_random.Next(100000000, 999999999)}";

                if (fieldEnum != FieldEnum.Year)
                    motorcycleResponse.Ano = DateTime.Today.Year - _random.Next(5, 11);

                if (fieldEnum != FieldEnum.Model)
                    motorcycleResponse.Modelo = _modelVehicles[_random.Next(_modelVehicles.Length)];

                if (fieldEnum != FieldEnum.Plate)
                    motorcycleResponse.Placa = _plates[_random.Next(_plates.Length)];
            }
            else if (forceSize)
            {
                motorcycleResponse.Ano = DateTime.Today.Year - _random.Next(5, 11);

                if (fieldEnum == FieldEnum.Identifier)
                    motorcycleResponse.Identificador = _longText;
                else
                    motorcycleResponse.Identificador = $"{_random.Next(100000000, 999999999)}";

                if (fieldEnum == FieldEnum.Model)
                    motorcycleResponse.Modelo = _longText;
                else
                    motorcycleResponse.Modelo = _modelVehicles[_random.Next(_modelVehicles.Length)];

                if (fieldEnum == FieldEnum.Plate)
                    motorcycleResponse.Placa = _longText;
                else
                    motorcycleResponse.Placa = _plates[_random.Next(_plates.Length)];
            }
        }
        else
        {
            motorcycleResponse.Identificador = $"{_random.Next(100000000, 999999999)}";
            motorcycleResponse.Modelo = _modelVehicles[_random.Next(_modelVehicles.Length)];
            motorcycleResponse.Ano = DateTime.Today.Year - _random.Next(5, 11);
            motorcycleResponse.Placa = _plates[_random.Next(_plates.Length)];
        }

        return motorcycleResponse;
    }

    protected async Task MotorcycleSetRented(
        long motorcycleId)
    {
        var putMotorcycleSetRentedRequest = new PutMotorcycleSetRentedRequest();
        putMotorcycleSetRentedRequest.Alugado = true;

        await _client.PutAsJsonAsync($"api/v1/motos/{motorcycleId}/alugado", putMotorcycleSetRentedRequest);
    }

    #endregion

    #region Notification

    protected async Task<GetNotificationResponse> GetNotification(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/notificacoes/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var notificationResponse = JsonConvert.DeserializeObject<GetNotificationResponse>(content);

        return notificationResponse;
    }

    protected async Task<PostNotificationResponse> CreateNotification(
        long orderId)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postNotificationRequest = GenerateRandomPostNotificationRequest(orderId, null, false);

        var response = await _client.PostAsJsonAsync("api/v1/notificacoes", postNotificationRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var notificationResponse = JsonConvert.DeserializeObject<PostNotificationResponse>(content);

        return notificationResponse;
    }

    protected PostNotificationRequest GenerateRandomPostNotificationRequest(
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var notificationResponse = FillNotification(orderId, fieldEnum, forceEmpty);

        return new PostNotificationRequest(notificationResponse.PedidoId, notificationResponse.Data);
    }

    protected PutNotificationRequest GenerateRandomPutNotificationRequest(
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var notificationResponse = FillNotification(orderId, fieldEnum, forceEmpty);

        return new PutNotificationRequest(notificationResponse.PedidoId, notificationResponse.Data);
    }

    protected GetNotificationResponse FillNotification(
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var notificationResponse = new GetNotificationResponse();

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.Date)
                    notificationResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));

                if (fieldEnum != FieldEnum.OrderId)
                    notificationResponse.PedidoId = orderId;
            }
        }
        else
        {
            notificationResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));
            notificationResponse.PedidoId = orderId;
        }

        return notificationResponse;
    }

    #endregion

    #region Order Accepted

    protected async Task<GetOrderAcceptedResponse> GetOrderAccepted(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/pedidosAceitos/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var orderAcceptedResponse = JsonConvert.DeserializeObject<GetOrderAcceptedResponse>(content);

        return orderAcceptedResponse;
    }

    protected async Task<PostOrderAcceptedResponse> CreateOrderAccepted(
        long driverId,
        long orderId)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postOrderAcceptedRequest = GenerateRandomPostOrderAcceptedRequest(driverId, orderId, null, false);

        var response = await _client.PostAsJsonAsync("api/v1/pedidosAceitos", postOrderAcceptedRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var orderAcceptedResponse = JsonConvert.DeserializeObject<PostOrderAcceptedResponse>(content);

        return orderAcceptedResponse;
    }

    protected PostOrderAcceptedRequest GenerateRandomPostOrderAcceptedRequest(
        long driverId,
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var orderAcceptedResponse = FillOrderAccepted(driverId, orderId, fieldEnum, forceEmpty);

        return new PostOrderAcceptedRequest(orderAcceptedResponse.EntregadorId, orderAcceptedResponse.PedidoId, orderAcceptedResponse.Data);
    }

    protected PutOrderAcceptedRequest GenerateRandomPutOrderAcceptedRequest(
        long driverId,
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var orderAcceptedResponse = FillOrderAccepted(driverId, orderId, fieldEnum, forceEmpty);

        return new PutOrderAcceptedRequest(orderAcceptedResponse.EntregadorId, orderAcceptedResponse.PedidoId, orderAcceptedResponse.Data);
    }

    protected GetOrderAcceptedResponse FillOrderAccepted(
        long driverId,
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var orderAcceptedResponse = new GetOrderAcceptedResponse();

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.Date)
                    orderAcceptedResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));

                if (fieldEnum != FieldEnum.OrderId)
                    orderAcceptedResponse.PedidoId = orderId;

                if (fieldEnum != FieldEnum.DriverId)
                    orderAcceptedResponse.EntregadorId = driverId;
            }
        }
        else
        {
            orderAcceptedResponse.EntregadorId = driverId;
            orderAcceptedResponse.PedidoId = orderId;
            orderAcceptedResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));
        }

        return orderAcceptedResponse;
    }

    #endregion

    #region Order Delivered

    protected async Task<GetOrderDeliveredResponse> GetOrderDelivered(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/pedidosEntregues/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var orderDeliveredResponse = JsonConvert.DeserializeObject<GetOrderDeliveredResponse>(content);

        return orderDeliveredResponse;
    }

    protected async Task<PostOrderDeliveredResponse> CreateOrderDelivered(
        long driverId,
        long orderId)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postOrderDeliveredRequest = GenerateRandomPostOrderDeliveredRequest(driverId, orderId, null, false);

        var response = await _client.PostAsJsonAsync("api/v1/pedidosEntregues", postOrderDeliveredRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var orderDeliveredResponse = JsonConvert.DeserializeObject<PostOrderDeliveredResponse>(content);

        return orderDeliveredResponse;
    }

    protected PostOrderDeliveredRequest GenerateRandomPostOrderDeliveredRequest(
        long driverId,
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var orderDeliveredResponse = FillOrderDelivered(driverId, orderId, fieldEnum, forceEmpty);

        return new PostOrderDeliveredRequest(orderDeliveredResponse.EntregadorId, orderDeliveredResponse.PedidoId, orderDeliveredResponse.Data);
    }

    protected PutOrderDeliveredRequest GenerateRandomPutOrderDeliveredRequest(
        long driverId,
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var orderDeliveredResponse = FillOrderDelivered(driverId, orderId, fieldEnum, forceEmpty);

        return new PutOrderDeliveredRequest(orderDeliveredResponse.EntregadorId, orderDeliveredResponse.PedidoId, orderDeliveredResponse.Data);
    }

    protected GetOrderDeliveredResponse FillOrderDelivered(
        long driverId,
        long orderId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var orderDeliveredResponse = new GetOrderDeliveredResponse();

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.Date)
                    orderDeliveredResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));

                if (fieldEnum != FieldEnum.OrderId)
                    orderDeliveredResponse.PedidoId = orderId;

                if (fieldEnum != FieldEnum.DriverId)
                    orderDeliveredResponse.EntregadorId = driverId;
            }
        }
        else
        {
            orderDeliveredResponse.EntregadorId = driverId;
            orderDeliveredResponse.PedidoId = orderId;
            orderDeliveredResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));
        }

        return orderDeliveredResponse;
    }

    #endregion

    #region Order Status

    protected async Task<GetOrderStatusResponse> GetOrderStatus(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/statusPedido/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var orderStatusResponse = JsonConvert.DeserializeObject<GetOrderStatusResponse>(content);

        return orderStatusResponse;
    }

    protected async Task<PostOrderStatusResponse> CreateOrderStatus()
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postOrderStatusRequest = GenerateRandomPostOrderStatusRequest(false, false);

        var response = await _client.PostAsJsonAsync("api/v1/statusPedido", postOrderStatusRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var orderStatusResponse = JsonConvert.DeserializeObject<PostOrderStatusResponse>(content);

        return orderStatusResponse;
    }

    protected PostOrderStatusRequest GenerateRandomPostOrderStatusRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var orderStatusResponse = FillOrderStatus(forceEmpty, forceSize);

        return new PostOrderStatusRequest(orderStatusResponse.Descricao);
    }

    protected PutOrderStatusRequest GenerateRandomPutOrderStatusRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var orderStatusResponse = FillOrderStatus(forceEmpty, forceSize);

        return new PutOrderStatusRequest(orderStatusResponse.Descricao);
    }

    protected GetOrderStatusResponse FillOrderStatus(
        bool forceEmpty,
        bool forceSize)
    {
        var orderStatusResponse = new GetOrderStatusResponse();

        if (forceEmpty)
            orderStatusResponse.Descricao = string.Empty;
        else if (forceSize)
            orderStatusResponse.Descricao = _longText;
        else
            orderStatusResponse.Descricao = _status[_random.Next(_status.Length)];

        return orderStatusResponse;
    }

    protected async Task ForceDeleteAllOrderStatus()
    {
        var listOrderStatus =
            await _orderStatusRepository.GetAll();

        foreach (var orderStatus in listOrderStatus)
            _orderStatusRepository.Delete(orderStatus);

        await _unitOfWork.Save()
                         .ConfigureAwait(false);
    }

    #endregion

    #region Order 

    protected async Task<GetOrderResponse> GetOrder(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/pedidos/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var orderResponse = JsonConvert.DeserializeObject<GetOrderResponse>(content);

        return orderResponse;
    }

    protected async Task<PostOrderResponse> CreateOrder()
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postOrderRequest = GenerateRandomPostOrderRequest(null, false, false);

        var response = await _client.PostAsJsonAsync("api/v1/pedidos", postOrderRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var orderResponse = JsonConvert.DeserializeObject<PostOrderResponse>(content);

        return orderResponse;
    }

    protected PostOrderRequest GenerateRandomPostOrderRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var orderResponse = FillOrder(fieldEnum, forceEmpty, forceSize);

        return new PostOrderRequest(orderResponse.Descricao, orderResponse.Valor, orderResponse.Data);
    }

    protected PutOrderRequest GenerateRandomPutOrderRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var orderResponse = FillOrder(fieldEnum, forceEmpty, forceSize);

        return new PutOrderRequest(orderResponse.Descricao, orderResponse.Valor, orderResponse.Data);
    }

    protected GetOrderResponse FillOrder(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var orderResponse = new GetOrderResponse();
        orderResponse.StatusId = SystemConst.OrderStatusAvailableDefault;

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.Description)
                    orderResponse.Descricao = _orders[_random.Next(_orders.Length)];

                if (fieldEnum != FieldEnum.Value)
                    orderResponse.Valor = _random.NextDouble() * (999999999 - 100000000) + 100000000;

                if (fieldEnum != FieldEnum.Date)
                    orderResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));
            }
            else if (forceSize)
            {
                orderResponse.Valor = _random.NextDouble() * (999999999 - 100000000) + 100000000;
                orderResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));

                if (fieldEnum == FieldEnum.Description)
                    orderResponse.Descricao = _longText;
                else
                    orderResponse.Descricao = _orders[_random.Next(_orders.Length)];
            }
        }
        else
        {
            orderResponse.Descricao = _orders[_random.Next(_orders.Length)];
            orderResponse.Valor = _random.NextDouble() * (999999999 - 100000000) + 100000000;
            orderResponse.Data = DateTime.UtcNow.AddDays(-_random.Next(1, 365));
        }

        return orderResponse;
    }

    protected async Task OrderRollback(
        long driverId,
        long orderId,
        long statusId)
    {
        await DriverSetDelivering(driverId, false);

        await OrderSetStatus(orderId, statusId);
    }

    protected async Task OrderSetStatus(
        long orderId,
        long statusId)
    {
        var putOrderSetStatusRequest = new PutOrderSetStatusRequest();
        putOrderSetStatusRequest.StatusId = statusId;

        await _client.PutAsJsonAsync($"api/v1/pedidos/{orderId}/status", putOrderSetStatusRequest);
    }

    #endregion

    #region Plan

    protected async Task<GetPlanResponse> GetPlan(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/planos/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var PlanResponse = JsonConvert.DeserializeObject<GetPlanResponse>(content);

        return PlanResponse;
    }

    protected async Task<PostPlanResponse> CreatePlan()
    {
        var postPlanRequest = GenerateRandomPostPlanRequest(null, false, false);

        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.PostAsJsonAsync("api/v1/planos", postPlanRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var planResponse = JsonConvert.DeserializeObject<PostPlanResponse>(content);

        return planResponse;
    }

    protected PostPlanRequest GenerateRandomPostPlanRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var planResponse = FillPlan(fieldEnum, forceEmpty, forceSize);

        return new PostPlanRequest(planResponse.TipoPlanoId, planResponse.Descricao, planResponse.TaxaDiaria, planResponse.TaxaAdicional, planResponse.TaxaFixa, planResponse.DuracaoEmDias, planResponse.Ativo);
    }

    protected PutPlanRequest GenerateRandomPutPlanRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var planResponse = FillPlan(fieldEnum, forceEmpty, forceSize);

        return new PutPlanRequest(planResponse.TipoPlanoId, planResponse.Descricao, planResponse.TaxaDiaria, planResponse.TaxaAdicional, planResponse.TaxaFixa, planResponse.DuracaoEmDias, planResponse.Ativo);
    }

    protected GetPlanResponse FillPlan(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var planResponse = new GetPlanResponse();
        planResponse.Ativo = false;

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.PlanTypeId)
                    planResponse.TipoPlanoId = SystemConst.PlanTypeProDefault;

                if (fieldEnum != FieldEnum.Description)
                    planResponse.Descricao = _planTypes[_random.Next(_planTypes.Length)];

                if (fieldEnum != FieldEnum.DailyRate)
                    planResponse.TaxaDiaria = _random.NextDouble() * (50 - 18) + 18;

                if (fieldEnum != FieldEnum.AdditionalRate)
                    planResponse.TaxaAdicional = _random.NextDouble() * (50 - 18) + 18;

                if (fieldEnum != FieldEnum.DailyLateFee)
                    planResponse.TaxaFixa = _random.NextDouble() * (50 - 18) + 18;

                if (fieldEnum != FieldEnum.DurationInDays)
                    planResponse.DuracaoEmDias = _random.Next(7, 51);
            }
            else if (forceSize)
            {
                planResponse.TipoPlanoId = SystemConst.PlanTypeProDefault;
                planResponse.TaxaDiaria = _random.NextDouble() * (50 - 18) + 18;
                planResponse.TaxaAdicional = _random.NextDouble() * (50 - 18) + 18;
                planResponse.TaxaFixa = _random.NextDouble() * (50 - 18) + 18;
                planResponse.DuracaoEmDias = _random.Next(7, 51);

                if (fieldEnum == FieldEnum.Description)
                    planResponse.Descricao = _longText;
                else
                    planResponse.Descricao = _planTypes[_random.Next(_planTypes.Length)];
            }
        }
        else
        {
            planResponse.TipoPlanoId = SystemConst.PlanTypeProDefault;
            planResponse.Descricao = _planTypes[_random.Next(_planTypes.Length)];
            planResponse.TaxaDiaria = _random.NextDouble() * (50 - 18) + 18;
            planResponse.TaxaAdicional = _random.NextDouble() * (50 - 18) + 18;
            planResponse.TaxaFixa = _random.NextDouble() * (50 - 18) + 18;
            planResponse.DuracaoEmDias = _random.Next(7, 51);
        }

        return planResponse;
    }

    protected async Task ForceDeleteAllPlan()
    {
        var listPlan =
            await _planRepository.GetAll();

        foreach (var plan in listPlan)
            _planRepository.Delete(plan);

        await _unitOfWork.Save()
                         .ConfigureAwait(false);
    }

    #endregion

    #region Plan Type

    protected async Task<GetPlanTypeResponse> GetPlanType(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/tiposPlano/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var planTypeResponse = JsonConvert.DeserializeObject<GetPlanTypeResponse>(content);

        return planTypeResponse;
    }

    protected async Task<PostPlanTypeResponse> CreatePlanType()
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postPlanTypeRequest = GenerateRandomPostPlanTypeRequest(false, false);

        var response = await _client.PostAsJsonAsync("api/v1/tiposPlano", postPlanTypeRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var planTypeResponse = JsonConvert.DeserializeObject<PostPlanTypeResponse>(content);

        return planTypeResponse;
    }

    protected PostPlanTypeRequest GenerateRandomPostPlanTypeRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var planTypeResponse = FillPlanType(forceEmpty, forceSize);

        return new PostPlanTypeRequest(planTypeResponse.Descricao);
    }

    protected PutPlanTypeRequest GenerateRandomPutPlanTypeRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var planTypeResponse = FillPlanType(forceEmpty, forceSize);

        return new PutPlanTypeRequest(planTypeResponse.Descricao);
    }

    protected GetPlanTypeResponse FillPlanType(
        bool forceEmpty,
        bool forceSize)
    {
        var planTypeResponse = new GetPlanTypeResponse();

        if (forceEmpty)
            planTypeResponse.Descricao = string.Empty;
        else if (forceSize)
            planTypeResponse.Descricao = _longText;
        else
            planTypeResponse.Descricao = _planTypes[_random.Next(_status.Length)];

        return planTypeResponse;
    }

    protected async Task ForceDeleteAllPlanType()
    {
        await ForceDeleteAllPlan();

        var listPlanType =
            await _planTypeRepository.GetAll();

        foreach (var planType in listPlanType)
            _planTypeRepository.Delete(planType);

        await _unitOfWork.Save()
                         .ConfigureAwait(false);
    }

    #endregion

    #region Rental

    protected async Task<GetRentalResponse> GetRental(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/locacao/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var rentalResponse = JsonConvert.DeserializeObject<GetRentalResponse>(content);

        return rentalResponse;
    }

    protected async Task<PostRentalResponse> CreateRental(
        long driverId,
        long motorcycleId,
        long planId)
    {
        var postRentalRequest = GenerateRandomPostRentalRequest(driverId, motorcycleId, planId, null, false);

        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.PostAsJsonAsync("api/v1/locacao", postRentalRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var rentalResponse = JsonConvert.DeserializeObject<PostRentalResponse>(content);

        return rentalResponse;
    }

    protected PostRentalRequest GenerateRandomPostRentalRequest(
        long driverId,
        long motorcycleId,
        long planId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var rentalResponse = FillRental(driverId, motorcycleId, planId, fieldEnum, forceEmpty);

        return new PostRentalRequest(rentalResponse.Entregador_Id, rentalResponse.Moto_Id, rentalResponse.Plano_Id, rentalResponse.Data_Inicio);
    }

    protected PutRentalRequest GenerateRandomPutRentalRequest(
        long driverId,
        long motorcycleId,
        long planId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var rentalResponse = FillRental(driverId, motorcycleId, planId, fieldEnum, forceEmpty);

        return new PutRentalRequest(rentalResponse.Entregador_Id, rentalResponse.Moto_Id, rentalResponse.Plano_Id, rentalResponse.Data_Inicio);
    }

    protected GetRentalResponse FillRental(
        long driverId,
        long motorcycleId,
        long planId,
        FieldEnum? fieldEnum,
        bool forceEmpty)
    {
        var rentalResponse = new GetRentalResponse();

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.DriverId)
                    rentalResponse.Entregador_Id = driverId;

                if (fieldEnum != FieldEnum.MotorcycleId)
                    rentalResponse.Moto_Id = motorcycleId;

                if (fieldEnum != FieldEnum.PlanId)
                    rentalResponse.Plano_Id = planId;

                if (fieldEnum != FieldEnum.StartDate)
                    rentalResponse.Data_Inicio = DateTime.UtcNow.AddDays(1);
            }
        }
        else
        {
            rentalResponse.Entregador_Id = driverId;
            rentalResponse.Moto_Id = motorcycleId;
            rentalResponse.Plano_Id = planId;
            rentalResponse.Data_Inicio = DateTime.UtcNow.AddDays(1);
        }

        return rentalResponse;
    }

    #endregion

    #region User Role

    protected async Task<GetUserRoleResponse> GetUserRole(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/tiposPerfil/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var userRoleResponse = JsonConvert.DeserializeObject<GetUserRoleResponse>(content);

        return userRoleResponse;
    }

    protected async Task<PostUserRoleResponse> CreateUserRole()
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postUserRoleRequest = GenerateRandomPostUserRoleRequest(false, false);

        var response = await _client.PostAsJsonAsync("api/v1/tiposPerfil", postUserRoleRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var userRoleResponse = JsonConvert.DeserializeObject<PostUserRoleResponse>(content);

        return userRoleResponse;
    }

    protected PostUserRoleRequest GenerateRandomPostUserRoleRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var userRoleResponse = FillUserRole(forceEmpty, forceSize);

        return new PostUserRoleRequest(userRoleResponse.Descricao);
    }

    protected PutUserRoleRequest GenerateRandomPutUserRoleRequest(
        bool forceEmpty,
        bool forceSize)
    {
        var userRoleResponse = FillUserRole(forceEmpty, forceSize);

        return new PutUserRoleRequest(userRoleResponse.Descricao);
    }

    protected GetUserRoleResponse FillUserRole(
        bool forceEmpty,
        bool forceSize)
    {
        var userRoleResponse = new GetUserRoleResponse();

        if (forceEmpty)
            userRoleResponse.Descricao = string.Empty;
        else if (forceSize)
            userRoleResponse.Descricao = _longText;
        else
            userRoleResponse.Descricao = _userRoles[_random.Next(_status.Length)];

        return userRoleResponse;
    }

    protected async Task ForceDeleteAllUserRole()
    {
        await ForceDeleteAllUser();

        var listUserRole =
            await _userRoleRepository.GetAll();

        foreach (var userRole in listUserRole)
            _userRoleRepository.Delete(userRole);

        await _unitOfWork.Save()
                         .ConfigureAwait(false);
    }

    #endregion

    #region User

    protected async Task<GetUserResponse> GetUser(
        long id)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await _client.GetAsync($"api/v1/usuarios/{id}");

        var content = await response.Content.ReadAsStringAsync();

        var userResponse = JsonConvert.DeserializeObject<GetUserResponse>(content);

        return userResponse;
    }

    protected async Task<PostUserResponse> CreateUser()
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var postUserRequest = GenerateRandomPostUserRequest(null, false, false);

        var response = await _client.PostAsJsonAsync("api/v1/usuarios", postUserRequest);

        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();

        var userResponse = JsonConvert.DeserializeObject<PostUserResponse>(content);

        return userResponse;
    }

    protected PostUserRequest GenerateRandomPostUserRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var userResponse = FillUser(fieldEnum, forceEmpty, forceSize);

        return new PostUserRequest(userResponse.TipoPerfilId, userResponse.Nome, userResponse.Email, userResponse.Senha, userResponse.Ativo);
    }

    protected PutUserRequest GenerateRandomPutUserRequest(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var userResponse = FillUser(fieldEnum, forceEmpty, forceSize);

        return new PutUserRequest(userResponse.TipoPerfilId, userResponse.Nome, userResponse.Email, userResponse.Senha, userResponse.Ativo);
    }

    protected GetUserResponse FillUser(
        FieldEnum? fieldEnum,
        bool forceEmpty,
        bool forceSize)
    {
        var userResponse = new GetUserResponse();
        userResponse.Ativo = true;

        var name = _firstNames[_random.Next(_firstNames.Length)];

        var email = $"{name}@mottu.app";

        var password = "1234";

        if (fieldEnum != null)
        {
            if (forceEmpty)
            {
                if (fieldEnum != FieldEnum.UserRoleId)
                    userResponse.TipoPerfilId = SystemConst.UserRoleDriverIdDefault;

                if (fieldEnum != FieldEnum.Name)
                    userResponse.Nome = _firstNames[_random.Next(_firstNames.Length)];

                if (fieldEnum != FieldEnum.Email)
                    userResponse.Email = email;

                if (fieldEnum != FieldEnum.Password)
                    userResponse.Senha = password;
            }
            else if (forceSize)
            {
                userResponse.TipoPerfilId = SystemConst.UserRoleDriverIdDefault;

                if (fieldEnum == FieldEnum.Name)
                    userResponse.Nome = _longText;
                else
                    userResponse.Nome = name;

                if (fieldEnum == FieldEnum.Email)
                    userResponse.Email = _longText;
                else
                    userResponse.Email = email;

                if (fieldEnum == FieldEnum.Password)
                    userResponse.Senha = _longText;
                else
                    userResponse.Senha = password;
            }
        }
        else
        {
            userResponse.TipoPerfilId = SystemConst.UserRoleDriverIdDefault;
            userResponse.Nome = name;
            userResponse.Email = email;
            userResponse.Senha = password;
        }

        return userResponse;
    }

    protected async Task UserSetActive(
        long userId,
        bool active)
    {
        var token = await LoginAdmin();

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var putUserSetActive = new PutUserSetActiveRequest(active);

        await _client.PutAsJsonAsync($"api/v1/usuarios/{userId}/ativo", putUserSetActive);
    }

    protected async Task ForceDeleteAllUser()
    {
        var listUser =
            await _userRepository.GetAll();

        foreach (var plan in listUser)
            _userRepository.Delete(plan);

        await _unitOfWork.Save()
                         .ConfigureAwait(false);
    }

    #endregion

    #region Extras

    protected static string GenerateCnpj()
    {
        int sum = 0, remainder = 0;
        int[] multiplier1 = new int[12] { 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };
        int[] multiplier2 = new int[13] { 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };

        Random rnd = new Random();
        string seed = rnd.Next(10000000, 99999999).ToString() + "0001";

        for (int i = 0; i < 12; i++)
            sum += int.Parse(seed[i].ToString()) * multiplier1[i];

        remainder = sum % 11;

        if (remainder < 2)
            remainder = 0;
        else
            remainder = 11 - remainder;

        seed = seed + remainder;
        sum = 0;

        for (int i = 0; i < 13; i++)
            sum += int.Parse(seed[i].ToString()) * multiplier2[i];

        remainder = sum % 11;

        if (remainder < 2)
            remainder = 0;
        else
            remainder = 11 - remainder;

        seed = seed + remainder;

        return seed;
    }

    #endregion

    #endregion
}